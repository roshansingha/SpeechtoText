{"version":3,"sources":["App.js","index.js"],"names":["mic","window","SpeechRecognition","webkitSpeechRecognition","continuous","interimResults","lang","App","useState","isListening","setIsListening","note","setNote","savedNotes","setSavedNotes","useEffect","handleListen","start","onend","console","log","stop","onstart","onresult","event","transcript","Array","from","results","map","result","join","onerror","error","className","onClick","disabled","prevState","n","key","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0NAKMA,G,MAAM,IADVC,OAAOC,mBAAqBD,OAAOE,0BAGrCH,EAAII,YAAa,EACjBJ,EAAIK,gBAAiB,EACrBL,EAAIM,KAAO,QAwEIC,MAtEf,WAAgB,IAAD,EACyBC,oBAAS,GADlC,mBACNC,EADM,KACOC,EADP,OAEWF,mBAAS,MAFpB,mBAENG,EAFM,KAEAC,EAFA,OAGuBJ,mBAAS,IAHhC,mBAGNK,EAHM,KAGMC,EAHN,KAKbC,qBAAU,WACRC,OAGF,IAAMA,EAAe,WACfP,GACFT,EAAIiB,QACJjB,EAAIkB,MAAQ,WACVC,QAAQC,IAAI,cACZpB,EAAIiB,WAGNjB,EAAIqB,OACJrB,EAAIkB,MAAQ,WACVC,QAAQC,IAAI,0BAGhBpB,EAAIsB,QAAU,WACZH,QAAQC,IAAI,YAGdpB,EAAIuB,SAAW,SAAAC,GACb,IAAMC,EAAaC,MAAMC,KAAKH,EAAMI,SACjCC,KAAI,SAAAC,GAAM,OAAIA,EAAO,MACrBD,KAAI,SAAAC,GAAM,OAAIA,EAAOL,cACrBM,KAAK,IACRZ,QAAQC,IAAIK,GACZb,EAAQa,GACRzB,EAAIgC,QAAU,SAAAR,GACZL,QAAQC,IAAII,EAAMS,UAUxB,OACE,oCACE,2CACA,yBAAKC,UAAU,aACb,yBAAKA,UAAU,OACb,4CACCzB,EAAc,oDAAmB,gEAClC,4BAAQ0B,QAZO,WACrBrB,EAAc,GAAD,mBAAKD,GAAL,CAAiBF,KAC9BC,EAAQ,KAU+BwB,UAAWzB,GAA5C,aAGA,4BAAQwB,QAAS,kBAAMzB,GAAe,SAAA2B,GAAS,OAAKA,OAApD,cAGA,2BAAI1B,IAEN,yBAAKuB,UAAU,OACb,qCACCrB,EAAWgB,KAAI,SAAAS,GAAC,OACf,uBAAGC,IAAKD,GAAIA,U,MClExBE,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.33b2242e.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport './App.css'\n\nconst SpeechRecognition =\n  window.SpeechRecognition || window.webkitSpeechRecognition\nconst mic = new SpeechRecognition()\n\nmic.continuous = true\nmic.interimResults = true\nmic.lang = 'en-US'\n\nfunction App() {\n  const [isListening, setIsListening] = useState(false)\n  const [note, setNote] = useState(null)\n  const [savedNotes, setSavedNotes] = useState([])\n\n  useEffect(() => {\n    handleListen()\n  })\n\n  const handleListen = () => {\n    if (isListening) {\n      mic.start()\n      mic.onend = () => {\n        console.log('continue..')\n        mic.start()\n      }\n    } else {\n      mic.stop()\n      mic.onend = () => {\n        console.log('Stopped Mic on Click')\n      }\n    }\n    mic.onstart = () => {\n      console.log('Mics on')\n    }\n\n    mic.onresult = event => {\n      const transcript = Array.from(event.results)\n        .map(result => result[0])\n        .map(result => result.transcript)\n        .join('')\n      console.log(transcript)\n      setNote(transcript)\n      mic.onerror = event => {\n        console.log(event.error)\n      }\n    }\n  }\n\n  const handleSaveNote = () => {\n    setSavedNotes([...savedNotes, note])\n    setNote('')\n  }\n\n  return (\n    <>\n      <h1>Voice Notes</h1>\n      <div className=\"container\">\n        <div className=\"box\">\n          <h2>Current Note</h2>\n          {isListening ? <span>🎙️</span> : <span>🛑🎙️</span>}\n          <button onClick={handleSaveNote} disabled={!note}>\n            Save Note\n          </button>\n          <button onClick={() => setIsListening(prevState => !prevState)}>\n            Start/Stop\n          </button>\n          <p>{note}</p>\n        </div>\n        <div className=\"box\">\n          <h2>Notes</h2>\n          {savedNotes.map(n => (\n            <p key={n}>{n}</p>\n          ))}\n        </div>\n      </div>\n    </>\n  )\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\n"],"sourceRoot":""}